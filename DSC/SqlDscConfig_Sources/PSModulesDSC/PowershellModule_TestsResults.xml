<?xml version="1.0" encoding="utf-8" standalone="no"?>
<test-results xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="nunit_schema_2.5.xsd" name="Pester" total="22" errors="0" failures="0" not-run="0" inconclusive="0" ignored="0" skipped="0" invalid="0" date="2018-10-18" time="17:55:19">
  <environment user="ContainerAdministrator" machine-name="37C02CE8C7A3" cwd="C:\" user-domain="User Manager" platform="Microsoft Windows Server 2016 Datacenter|C:\Windows|\Device\Harddisk1\Partition2" nunit-version="2.5.8.0" os-version="10.0.14393" clr-version="4.0.30319.42000" />
  <culture-info current-culture="en-US" current-uiculture="en-US" />
  <test-suite type="TestFixture" name="Pester" executed="True" result="Success" success="True" time="7.9042" asserts="0" description="Pester">
    <results>
      <test-suite type="TestFixture" name="C:\projects\psmodulesdsc\Tests\Unit\PowershellModule.tests.ps1" executed="True" result="Success" success="True" time="7.9042" asserts="0" description="C:\projects\psmodulesdsc\Tests\Unit\PowershellModule.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="PowershellModule" executed="True" result="Success" success="True" time="7.9042" asserts="0" description="PowershellModule">
            <results>
              <test-suite type="TestFixture" name="When the GetPSBoundParameters method is called" executed="True" result="Success" success="True" time="3.4744" asserts="0" description="When the GetPSBoundParameters method is called">
                <results>
                  <test-case description="Should not throw" name="PowershellModule.When the GetPSBoundParameters method is called.Should not throw" time="3.2262" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should be a hashtable" name="PowershellModule.When the GetPSBoundParameters method is called.Should be a hashtable" time="0.1881" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return the expected properties" name="PowershellModule.When the GetPSBoundParameters method is called.Should return the expected properties" time="0.0601" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="When the Get method is called" executed="True" result="Success" success="True" time="1.0505" asserts="0" description="When the Get method is called">
                <results>
                  <test-case description="Should not throw" name="PowershellModule.When the Get method is called.Should not throw" time="0.2043" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return a type of PowershellModule" name="PowershellModule.When the Get method is called.Should return a type of PowershellModule" time="0.0953" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should call Get-Module one time" name="PowershellModule.When the Get method is called.Should call Get-Module one time" time="0.5811" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return null if module does not exist" name="PowershellModule.When the Get method is called.Should return null if module does not exist" time="0.1028" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return name and version if module does exist" name="PowershellModule.When the Get method is called.Should return name and version if module does exist" time="0.067" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="When the Test method is called" executed="True" result="Success" success="True" time="0.8857" asserts="0" description="When the Test method is called">
                <results>
                  <test-suite type="TestFixture" name="Ensure = Present" executed="True" result="Success" success="True" time="0.5609" asserts="0" description="Ensure = Present">
                    <results>
                      <test-case description="Should return $false when module does not exist" name="PowershellModule.When the Test method is called.Ensure = Present.Should return $false when module does not exist" time="0.1097" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should return $false when module version is incorrect" name="PowershellModule.When the Test method is called.Ensure = Present.Should return $false when module version is incorrect" time="0.3055" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should return $false when module count is incorrect" name="PowershellModule.When the Test method is called.Ensure = Present.Should return $false when module count is incorrect" time="0.0671" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should return $true when module does exist" name="PowershellModule.When the Test method is called.Ensure = Present.Should return $true when module does exist" time="0.0786" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="Ensure = Absent" executed="True" result="Success" success="True" time="0.0789" asserts="0" description="Ensure = Absent">
                    <results>
                      <test-case description="Should return $false when module does exist" name="PowershellModule.When the Test method is called.Ensure = Absent.Should return $false when module does exist" time="0.0566" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should return $true when module does not exist" name="PowershellModule.When the Test method is called.Ensure = Absent.Should return $true when module does not exist" time="0.0222" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-case description="Should not throw" name="PowershellModule.When the Test method is called.Should not throw" time="0.178" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return a type of &quot;boolean&quot;" name="PowershellModule.When the Test method is called.Should return a type of &quot;boolean&quot;" time="0.0679" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="When the Set method is called" executed="True" result="Success" success="True" time="2.4936" asserts="0" description="When the Set method is called">
                <results>
                  <test-case description="Should not throw" name="PowershellModule.When the Set method is called.Should not throw" time="0.1509" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should call Install-Module if Ensure is Present" name="PowershellModule.When the Set method is called.Should call Install-Module if Ensure is Present" time="0.2113" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should call Install-PackageProvider if Ensure is Present and NuGet provider is missing" name="PowershellModule.When the Set method is called.Should call Install-PackageProvider if Ensure is Present and NuGet provider is missing" time="0.7551" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should call Uninstall-Module and Install-Module if Ensure is Present and Version -lt desired" name="PowershellModule.When the Set method is called.Should call Uninstall-Module and Install-Module if Ensure is Present and Version -lt desired" time="0.7206" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should call Uninstall-Module and Install-Module if Ensure is Present and Version -gt desired" name="PowershellModule.When the Set method is called.Should call Uninstall-Module and Install-Module if Ensure is Present and Version -gt desired" time="0.5881" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should call Uninstall-Module if Ensure is Absent" name="PowershellModule.When the Set method is called.Should call Uninstall-Module if Ensure is Absent" time="0.0675" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
    </results>
  </test-suite>
</test-results>