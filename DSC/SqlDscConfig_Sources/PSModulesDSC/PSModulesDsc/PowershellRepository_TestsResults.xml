<?xml version="1.0" encoding="utf-8" standalone="no"?>
<test-results xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="nunit_schema_2.5.xsd" name="Pester" total="24" errors="0" failures="0" not-run="0" inconclusive="0" ignored="0" skipped="0" invalid="0" date="2018-10-18" time="17:56:05">
  <environment user="ContainerAdministrator" machine-name="8C646F17A9BB" cwd="C:\" user-domain="User Manager" platform="Microsoft Windows Server 2016 Datacenter|C:\Windows|\Device\Harddisk2\Partition2" nunit-version="2.5.8.0" os-version="10.0.14393" clr-version="4.0.30319.42000" />
  <culture-info current-culture="en-US" current-uiculture="en-US" />
  <test-suite type="TestFixture" name="Pester" executed="True" result="Success" success="True" time="39.3962" asserts="0" description="Pester">
    <results>
      <test-suite type="TestFixture" name="C:\projects\psmodulesdsc\Tests\Unit\PowershellRepository.tests.ps1" executed="True" result="Success" success="True" time="39.3962" asserts="0" description="C:\projects\psmodulesdsc\Tests\Unit\PowershellRepository.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="PowershellRepository" executed="True" result="Success" success="True" time="39.3962" asserts="0" description="PowershellRepository">
            <results>
              <test-suite type="TestFixture" name="When the GetPSBoundParameters method is called" executed="True" result="Success" success="True" time="2.8425" asserts="0" description="When the GetPSBoundParameters method is called">
                <results>
                  <test-case description="Should not throw" name="PowershellRepository.When the GetPSBoundParameters method is called.Should not throw" time="2.5766" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should be a hashtable" name="PowershellRepository.When the GetPSBoundParameters method is called.Should be a hashtable" time="0.1615" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return the expected properties" name="PowershellRepository.When the GetPSBoundParameters method is called.Should return the expected properties" time="0.1044" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="When the Get method is called" executed="True" result="Success" success="True" time="1.8929" asserts="0" description="When the Get method is called">
                <results>
                  <test-case description="Should not throw" name="PowershellRepository.When the Get method is called.Should not throw" time="0.728" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return a type of PowershellRepository" name="PowershellRepository.When the Get method is called.Should return a type of PowershellRepository" time="0.5471" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should call Get-PSRepository one time" name="PowershellRepository.When the Get method is called.Should call Get-PSRepository one time" time="0.5068" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return null if PSRepository does not exist" name="PowershellRepository.When the Get method is called.Should return null if PSRepository does not exist" time="0.0697" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return name and version if PSRepository does exist" name="PowershellRepository.When the Get method is called.Should return name and version if PSRepository does exist" time="0.0414" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="When the Test method is called" executed="True" result="Success" success="True" time="2.0052" asserts="0" description="When the Test method is called">
                <results>
                  <test-suite type="TestFixture" name="Ensure = Present" executed="True" result="Success" success="True" time="0.6462" asserts="0" description="Ensure = Present">
                    <results>
                      <test-case description="Should return $false when PSRepository does not exist" name="PowershellRepository.When the Test method is called.Ensure = Present.Should return $false when PSRepository does not exist" time="0.1588" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should throw when PSRepository does not exist and SourceLocation unspecified" name="PowershellRepository.When the Test method is called.Ensure = Present.Should throw when PSRepository does not exist and SourceLocation unspecified" time="0.2564" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should not throw when PSGallery does not exist and SourceLocation unspecified" name="PowershellRepository.When the Test method is called.Ensure = Present.Should not throw when PSGallery does not exist and SourceLocation unspecified" time="0.1126" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should return $false when InstallationPolicy is incorrect" name="PowershellRepository.When the Test method is called.Ensure = Present.Should return $false when InstallationPolicy is incorrect" time="0.0518" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should return $false when SourceLocation is incorrect" name="PowershellRepository.When the Test method is called.Ensure = Present.Should return $false when SourceLocation is incorrect" time="0.0275" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should return $true when PSRepository does exist" name="PowershellRepository.When the Test method is called.Ensure = Present.Should return $true when PSRepository does exist" time="0.0391" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="Ensure = Absent" executed="True" result="Success" success="True" time="0.1415" asserts="0" description="Ensure = Absent">
                    <results>
                      <test-case description="Should return $false when PSRepository does exist" name="PowershellRepository.When the Test method is called.Ensure = Absent.Should return $false when PSRepository does exist" time="0.0701" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should return $true when PSRepository does not exist" name="PowershellRepository.When the Test method is called.Ensure = Absent.Should return $true when PSRepository does not exist" time="0.0714" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-case description="Should not throw" name="PowershellRepository.When the Test method is called.Should not throw" time="0.6803" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return a type of &quot;boolean&quot;" name="PowershellRepository.When the Test method is called.Should return a type of &quot;boolean&quot;" time="0.5372" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="When the Set method is called" executed="True" result="Success" success="True" time="32.6555" asserts="0" description="When the Set method is called">
                <results>
                  <test-case description="Should not throw" name="PowershellRepository.When the Set method is called.Should not throw" time="1.8298" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should call Install-PackageProvider if Ensure is Present and NuGet provider is missing" name="PowershellRepository.When the Set method is called.Should call Install-PackageProvider if Ensure is Present and NuGet provider is missing" time="4.8246" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should call Register-PSRepository if Ensure is Present and repository is absent" name="PowershellRepository.When the Set method is called.Should call Register-PSRepository if Ensure is Present and repository is absent" time="1.8855" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should call Set-PSRepository if InstallationPolicy is incorrect" name="PowershellRepository.When the Set method is called.Should call Set-PSRepository if InstallationPolicy is incorrect" time="1.2146" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should call Unregister then Set-PSRepository if SourceLocation is incorrect" name="PowershellRepository.When the Set method is called.Should call Unregister then Set-PSRepository if SourceLocation is incorrect" time="22.8603" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should call Unregister-PSRepository if Ensure is Absent" name="PowershellRepository.When the Set method is called.Should call Unregister-PSRepository if Ensure is Absent" time="0.0406" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
    </results>
  </test-suite>
</test-results>